"""The Job interface.

The class describes the common interface all job types implement.

"""

from datetime import datetime, timezone
from ..interfaces.job import generation_job, generation_job_results, Job_State_Enum
from ..internal import job_queue, config
from . import orm
from ..rational import orm as rat_orm
from threading import Semaphore
from typing import List
from dacite import from_dict
from dataclasses import asdict
import math
import copy
import uuid

OPEN_STEN_FILTER = {
    "$and": [
        {"state": {"$ne": orm.DBjobState_Enum.complete}},
        {"state": {"$ne": orm.DBjobState_Enum.no_headroom}},
    ]
}
STARTED_STEN_FILTER = {
    "$and": [
        {"state": {"$ne": orm.DBjobState_Enum.complete}},
        {"state": {"$ne": orm.DBjobState_Enum.new}},
    ]
}


semaphore: Semaphore = Semaphore()



class <template>_Job_Results(generation_job_results):
    """_summary_

    Parameters
    ----------
    generation_job_results : _type_
        _description_
    """

    mont_list: List[str]
    crossing_num: int = None


class <template>_Job(generation_job):
    """_summary_

    Parameters
    ----------
    generation_job : _type_
        _description_
    """

    rat_lists: List[List[str]]
    _results: <template>_Job_Results = None

    async def store(self):
        ...

    def update_results(self, res: <template>_Job_Results):
        self._results = res



async def get_jobs(count: int):
    """_summary_

    Parameters
    ----------
    count : int
        _description_
    """
    global semaphore
    ...


async def startup_jobs():
    """_summary_"""
    global semaphore
    ...
